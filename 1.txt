#include "MKL25Z4.h"
#define BAUD_RATE	9600
#define UART_TX_PORTE22 22
#define UART_RX_PORTE23 23
#define UART2_INT_PRIO 128

#define LED_RED 2 // 0b00000010
#define LED_MASK(x) (x & 0x06)
#define BIT0_MASK(x) (x & 0x01)

#define RED_LED 18 // PortB Pin 18
#define GREEN_LED 19 // PortB Pin 19
#define BLUE_LED 1 // PortD Pin 1
#define MASK(x) (1 << (x)) 

#define Q_SIZE (32)
unsigned int test;

volatile unsigned char hold;

typedef struct {
	unsigned char Data[Q_SIZE];
	unsigned int Head;
	unsigned int Tail;
	unsigned int Size;
	
} Q_T;

Q_T tx_q, rx_q;

void Q_Init(Q_T *q) {
	unsigned int i;
	for (i = 0; i < Q_SIZE; i++) {
		q->Data[i] = 0;
	}
	q->Head = 0;
	q->Tail = 0;
	q->Size = 0;
}

int Q_Empty(Q_T *q) {
	return q->Size == 0;
}

int Q_Full(Q_T *q) {
	return q->Size == Q_SIZE;
}

int Q_Enqueue(Q_T *q, unsigned char d) {
	if (!Q_Full(q)) {
		q->Data[q->Tail++] = d;
		q->Tail %= Q_SIZE;
		q->Size++;
		return 1;
	} else {
		return 0;
	}
} 


unsigned char Q_Dequeue(Q_T *q) {
	unsigned char t = 0;
	if(!Q_Empty(q)) {
		t = q->Data[q->Head];
		q->Data[q->Head++] = 0;
		q->Head %= Q_SIZE;
		q->Size--;
	}
	return t;
}

typedef enum { RED, BLUE, GREEN } color_t;

void led_control(color_t color) {
	//off all leds by setting 1 due to active low
	PTB->PDOR |= (MASK(GREEN_LED) | MASK(RED_LED));
	PTD->PDOR |= MASK(BLUE_LED);
	switch (color) {
		case RED:
			PTB->PDOR &= ~MASK(RED_LED); 
			break;
		case BLUE:
			PTD->PDOR &= ~MASK(BLUE_LED);
			break;
		case GREEN:
			PTB->PDOR &= ~MASK(GREEN_LED);
			PTB->PDOR |= MASK(RED_LED);
			break;
		default:
			break; // do nothing on default
	}
	return;
}

void InitGPIO(void)
{
	
	// Enable Clock to PORTB and PORTD
	SIM->SCGC5 |= ((SIM_SCGC5_PORTB_MASK) | (SIM_SCGC5_PORTD_MASK));
	// Configure MUX settings to make all 3 pins GPIO
	PORTB->PCR[RED_LED] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[RED_LED] |= PORT_PCR_MUX(1);
	PORTB->PCR[GREEN_LED] &= ~PORT_PCR_MUX_MASK;
	PORTB->PCR[GREEN_LED] |= PORT_PCR_MUX(1);
	PORTD->PCR[BLUE_LED] &= ~PORT_PCR_MUX_MASK;
	PORTD->PCR[BLUE_LED] |= PORT_PCR_MUX(1);
	// Set Data Direction Registers for PortB and PortD
	PTB->PDDR |= (MASK(RED_LED) | MASK(GREEN_LED));
	PTD->PDDR |= MASK(BLUE_LED);
}

void initUART2(uint32_t baud_rate) {
	uint32_t divisor, bus_clock;
	
	SIM->SCGC4 |= SIM_SCGC4_UART2_MASK;
	SIM->SCGC5 |= SIM_SCGC5_PORTE_MASK;
	
	PORTE->PCR[UART_TX_PORTE22] &= ~PORT_PCR_MUX_MASK;
	PORTE->PCR[UART_TX_PORTE22] |= PORT_PCR_MUX(4);
	
	PORTE->PCR[UART_RX_PORTE23] &= ~PORT_PCR_MUX_MASK;
	PORTE->PCR[UART_RX_PORTE23] |= PORT_PCR_MUX(4);
	
	UART2->C2 &= ~((UART_C2_TIE_MASK) | (UART_C2_RIE_MASK));
	
	bus_clock = (DEFAULT_SYSTEM_CLOCK)/2;
	divisor = bus_clock / (baud_rate * 16);
	UART2->BDH = UART_BDH_SBR(divisor >> 8);
	UART2->BDL = UART_BDL_SBR(divisor);
	
	UART2->C1 = 0;
	UART2->S2 = 0;
	UART2->C3 = 0;
	
	UART2->C2 |= ((UART_C2_TIE_MASK) | (UART_C2_RIE_MASK));
	UART2->C2 |= UART_C2_RIE_MASK;
	
	Q_Init(&tx_q);
	Q_Init(&rx_q);
	
	NVIC_SetPriority(UART2_IRQn, 128);
	NVIC_ClearPendingIRQ(UART2_IRQn);
	NVIC_EnableIRQ(UART2_IRQn);
}

void offRGB(void) {
	PTB->PDOR |= (MASK(GREEN_LED) | MASK(RED_LED));
	PTD->PDOR |= MASK(BLUE_LED);
}

void UART2_Transmit_Poll(uint8_t data) {
	while(!(UART2->S1 & UART_S1_TDRE_MASK));
	UART2->D = data;
}

uint8_t UART2_Receive_poll(void) {
	while(!(UART2->S1 & UART_S1_TDRE_MASK));
	return (UART2->D);
}

/* Delay Routine */
static void delay(volatile uint32_t nof) {
	while(nof != 0) {
		__asm("NOP");
		nof--;
	}
}

void UART2_IRQHandler(void) {
	NVIC_ClearPendingIRQ(UART2_IRQn);
	if (!(UART2->S1 & UART_S1_RDRF_MASK)) {
		unsigned char data = UART2->D;
		if (Q_Full(&rx_q)) {
			Q_Enqueue(&rx_q, data);
			hold = UART2->D;
			
		} else {
			// handle data when queue is full
		}
	}
	if (UART2->S1 & (UART_S1_OR_MASK |
									 UART_S1_NF_MASK |
									 UART_S1_FE_MASK |
									 UART_S1_PF_MASK)){
		// Handle the error
		// Clear the interrupt flag
	
	}
	PORTE->ISFR = 0xffffff;
}




int main(void) {
	uint8_t rx_data = 0xAA;
	
	test = Q_Enqueue(&rx_q, 'A');
	SystemCoreClockUpdate();
	initUART2(BAUD_RATE);
	InitGPIO();
	offRGB();
	while(1) {
		//rx_data = Q_Dequeue(&rx_q);
		if (LED_MASK(rx_data) == LED_RED) {
			if(BIT0_MASK(rx_data)) {
				led_control(RED);
			} else {
				led_control(BLUE);
			}
		} else {
			led_control(GREEN);
		}
		
	}
}

